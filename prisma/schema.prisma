// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  usuarioId        Int              @id @default(autoincrement())
  nombre           String
  email            String           @unique
  password         String
  ciudad           String?
  estado           String?
  fecharegistro    DateTime         @default(now())
  apellido         String

  electrodomesticos Electrodomestico[]
  recibos           Recibo[]
  tipsGuardados     TipsGuardados[]
}

model Electrodomestico {
  electrodomesticoId Int      @id @default(autoincrement())
  usuarioId          Int?
  nombre             String
  tipo               String?
  consumowatts       Int?
  descripcion        String?
  urlimagen          String?
  marca              String             // Newly added field
  modelo             String             // Newly added field
  fecharegistro      DateTime @default(now())

  usuario            Usuario? @relation(fields: [usuarioId], references: [usuarioId], onDelete: Cascade)
}

model Recibo {
  idRecibo        Int              @id @default(autoincrement())
  usuarioId       Int
  LecturaActual   Int
  LecturaAnterior Int
  InicioPeriodo   DateTime
  FinPeriodo      DateTime
  Subtotal        Float

  usuario         Usuario          @relation(fields: [usuarioId], references: [usuarioId], onDelete: Cascade)
  concepto        Concepto[]       @relation("ReciboConcepto")
}

model Concepto {
  idConcepto           Int                @id @default(autoincrement())
  idRecibo             Int
  idCategoriaConcepto  Int
  TotalPeriodo         Int
  Precio               Float

  recibo               Recibo             @relation(fields: [idRecibo], references: [idRecibo], onDelete: Cascade, name: "ReciboConcepto")
  categoriaConcepto    CategoriaConcepto  @relation(fields: [idCategoriaConcepto], references: [idCategoriaConcepto], onDelete: Cascade)
}


model CategoriaConcepto {
  idCategoriaConcepto  Int                @id @default(autoincrement())
  Consumo              String             @db.VarChar(20)

  conceptos            Concepto[]
}

model Tip {
  tipId         Int            @id @default(autoincrement())
  categoria     String
  contenido     String

  tipsGuardados TipsGuardados[]
}

model TipsGuardados {
  tipguardadoId Int     @id @default(autoincrement())
  usuarioid     Int
  tipid         Int

  usuario       Usuario @relation(fields: [usuarioid], references: [usuarioId], onDelete: Cascade)
  tip           Tip     @relation(fields: [tipid], references: [tipId], onDelete: Cascade)
}
